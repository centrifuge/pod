package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _go_centrifuge_build_configs_default_config_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x73\xdb\x38\x12\xbe\xf3\x57\x74\xc9\x97\x64\x6b\x2c\x89\xd4\xc3\x32\xab\xf6\x20\x4b\xb6\xc7\xf1\x63\x65\xcb\xb1\x27\xb9\x6c\x41\x60\x93\x44\x44\x02\x0c\x00\xea\xe1\x5f\xbf\xd5\x20\x29\xcb\xe3\x64\xb3\x93\xc9\x6c\xd5\x54\xc5\x17\xab\x00\xf4\xd7\x8d\xee\xaf\x1f\xc4\x01\x4c\x31\x66\x65\x66\x21\xc2\x15\x66\xaa\xc8\x51\x5a\xb0\x68\xac\x44\x0b\x2c\x61\x42\x1a\x0b\x4b\xb5\x62\xd2\xe3\x28\xad\x16\x71\x99\xe0\x0d\xda\xb5\xd2\xcb\x10\xe2\x4c\x48\xeb\x39\x10\x21\x11\x6c\x8a\x10\xd5\x78\xb2\x3a\x63\xc0\xa6\xcc\xc2\x64\x27\x0b\x39\x13\xd2\x12\xae\xd7\x1c\x09\x3d\x80\x03\xb8\x52\x9c\x65\x4e\xb5\x90\x09\x70\x25\xad\x66\xdc\x02\x8b\x22\x8d\xc6\xa0\x01\x89\x18\x81\x55\xb0\x40\x30\x68\x61\x2d\x6c\x0a\x28\x57\xb0\x62\x5a\xb0\x45\x86\xa6\xed\x41\x23\x4f\x90\x00\x22\x0a\xa1\xd7\xeb\xb9\xdf\x68\x53\xd4\x58\xe6\xb5\xed\x17\x51\x08\xa3\xde\xa8\xda\x5b\x28\x65\x8d\xd5\xac\x98\x21\x6a\x53\xc9\x1e\x42\xab\x23\x8a\x7e\xc7\x0f\x8e\xda\xdd\x76\xb7\xed\x77\x2c\x2f\x3a\xbd\x51\xd0\x0d\x3a\xa2\x88\x4d\xe7\x36\xbf\xbf\xdd\x2c\xd6\xcb\xf2\xe3\x87\x0f\xd3\xb8\x7c\xba\x5f\x6c\x4e\xc7\x77\x78\x7f\x33\xb9\x52\x4f\xdb\xed\x60\x30\x5a\xdd\xca\xe4\x61\x35\xbb\xfe\x74\xf5\x61\xd9\xfa\x06\x68\xaf\x01\x7d\x88\x87\xa7\x37\xc3\x7c\xf9\xf9\x11\x3f\x3d\x5e\x3e\x06\x9f\x67\xa5\x3f\xfc\xad\x88\xce\x7b\xcb\x77\xca\xbf\xef\xe5\x29\x4b\x67\x27\x83\x39\x0e\xa4\x5f\x81\x36\xae\x1a\x37\x9e\xaa\x2e\x40\xd7\x47\x69\x85\xdd\x9e\x31\x6e\x95\xde\x86\xd0\x6a\x79\xce\xd5\xd7\x4c\xc8\x57\x01\x6f\x22\x06\x6f\x2e\x29\xdc\x6f\x3d\xa8\xc2\x5b\xa1\x1d\xc0\x4d\x99\xa3\x16\x1c\x2e\xa6\xa0\x62\x17\xea\xbd\xa0\xd6\xb2\x3b\xaf\xfb\x41\x2d\x75\xd2\xb8\x16\x32\x61\x2c\x49\x4a\x15\xe1\x6b\x56\x14\x5a\xad\x84\xdb\x50\x0e\xdb\xa9\x6e\x88\xf8\xcd\x20\xf5\x06\xed\xa0\x1f\xb4\x83\x5e\xb7\xed\xfb\xc3\xdf\x47\xca\x0f\xa6\xbd\x4b\xa5\x1e\xe7\x8b\xcd\xe2\x72\xb2\xf8\x98\x1e\xbf\x7b\xb0\xe6\x76\xfb\x70\x1e\xdd\xcf\x34\xeb\xdf\x15\xf3\x71\xdf\x2e\x56\x66\xc8\xa4\xef\x7f\x5a\x9f\x8f\x83\xa7\xd6\x2b\xfc\x5e\xbf\x7d\x14\xb4\xfd\xe0\xe8\x6b\xf0\xb7\x79\xc0\xe7\xb9\x3e\x15\x6c\x7e\xfd\xd0\x4f\xde\xaf\x8e\x1e\xcf\xd3\x22\xb9\x5b\xab\xd1\x5a\x9d\xcd\xcd\xaf\xe9\xc7\xf3\xc5\xb9\xe8\xb1\xf1\x68\xd3\xaa\xdd\x73\x5a\xb3\x72\xe7\xfc\x8b\x29\x1c\x82\x0b\xc0\xd7\x58\xdb\x6f\x5c\x7b\xc5\x5c\xd8\x22\x2c\x32\xb5\xc5\x08\xe6\x39\xd3\x16\x26\x35\x1b\x0c\xc4\x4a\x3b\x57\x26\x62\x85\xf2\x85\x2b\xff\x00\x63\xba\x1b\xbf\x37\x0c\x4e\xf9\x49\x3c\x1a\x1e\x1d\x07\xfd\xde\x69\xd0\x8f\xc7\xdd\xd3\x49\x3f\x18\x44\x01\xfa\xdd\x71\x77\x14\x04\x3d\x7e\x34\xdd\xe7\x96\xb1\x2c\xa1\x2c\x7e\x4d\x29\x96\x2f\x50\x7f\x1f\xa5\xfc\x3f\x49\x29\xa7\xfa\x9b\x94\xfa\xeb\x49\xf5\x93\x56\x3f\x9e\x56\x9c\x59\x96\x6d\xcd\x77\x16\xab\x3f\xcb\xac\x49\xad\xfd\x27\xb9\xfe\xbe\xe4\xa2\x79\xe7\x99\x18\x79\xb5\xf2\x7d\x74\xea\xfe\x2f\xfd\xca\x3f\x1e\xb5\xfd\x20\x68\xfb\xfe\x57\x83\x33\x4e\x7a\xa7\x7c\x6c\xf5\x87\x87\xc9\x66\xfd\x34\x5c\x0e\xcd\xfd\xb1\xf8\x38\xbf\x7b\xb2\x4f\xc7\xd3\xa3\xed\xfb\xa7\xe2\x64\x76\x77\x7a\xf6\xa4\xdf\xab\x87\xd7\xfd\x8a\xd8\x15\xf8\x6d\xdf\x7f\x35\xb9\x34\xf8\x97\xe7\x6b\xb1\xf9\x0d\x65\xf9\xdb\xf8\xe1\xf3\xf2\xdd\x65\x2e\x7f\x9d\x8f\xdf\x4d\x3f\x3d\xc5\x47\x78\x7e\xad\x86\x56\x2b\x91\x7c\xdc\xe4\x47\xe3\xc1\xdd\x7f\x0f\x7e\xed\xae\xaf\x85\xdf\xff\xff\x46\x7f\x7c\xd6\x1f\x0c\xb9\x3f\xec\x8d\x86\x6c\xd8\x8f\xa3\xfe\x59\x7f\x31\x3c\x66\xb1\xdf\x63\xa3\xe1\x34\xee\x9e\x0c\x86\xc1\x98\x75\xbb\x75\xf4\xf7\x42\xf9\x9a\x08\xcf\x43\xef\x8f\xe6\xc2\x5f\xcf\x86\x9f\x7c\xf8\xc3\x7c\x38\x80\x29\xb3\x0c\xe6\x56\x69\x96\xa0\x67\xaa\xff\xd5\x07\xca\x8c\xd9\xd4\x99\x94\xd1\xe4\x3c\x3d\x81\x58\x64\xe8\x01\x14\xcc\xa6\x21\x74\x6c\x5e\x74\x12\x75\xf8\x4c\x98\xce\xf3\xcf\x7f\x47\xcc\xb2\xb6\x93\x8b\x16\xa4\x65\xa2\x64\x2c\x92\x52\x33\x2b\x94\xdc\xa9\xe3\x6e\x75\xfe\xa3\x94\x56\x70\xaf\x74\x8f\x39\x57\xa5\xb4\x06\x96\xb8\x85\xfa\x86\x1e\xab\x17\x49\xeb\x12\xb7\xb4\x8c\x35\x7e\xb3\x45\xb2\x17\xd2\xa2\x8e\x19\x47\x58\x53\x54\x5d\x74\xc6\xb3\x0b\x60\x32\x82\x59\x30\x83\x39\xea\x15\x6a\xd7\x3e\x51\x52\x7f\xf4\xa8\x83\xfe\xaa\x8c\x95\x2c\x47\xfa\x2e\xa8\x3f\x7c\xbc\x03\x98\x29\x6d\x6b\x18\x82\xf8\xb2\x28\x1d\x0a\x61\xd4\x1d\x05\xa4\x9e\xd2\xe7\xd0\xaa\xc3\x02\x51\x03\xdf\xf7\xa1\xf1\x8a\xa0\xa8\x5c\x36\x2f\x90\x8b\x78\x0b\xa7\x1b\x8b\x5a\xb2\x0c\x2e\x66\x7b\xd6\x12\x28\x70\x26\xe9\x33\x52\x23\xe3\x29\x46\xc0\x2c\x88\x18\x16\x98\x0a\x19\xc1\xcd\xf8\x9e\x60\xb0\x96\xbe\x98\x85\xb0\x6e\x6f\xda\xdb\xf6\x53\x15\x10\xb2\xba\x34\x18\xed\xd8\x49\xf7\xce\xd8\x16\x35\x85\xc5\x99\xeb\x72\xcb\x9d\xbe\x17\x39\xaa\xd2\x5d\x53\x82\x2a\x50\xd6\xdf\xb6\x12\xb9\xb3\x9a\x26\x08\xba\x8c\xf1\xa0\x59\xae\x45\x42\x68\xf5\xba\xa6\xe5\x50\x72\x21\x45\x5e\xe6\x10\x61\xc6\xb6\x4e\x2f\xae\x50\x6f\xa1\x08\x0a\xd0\x68\x0a\x25\x0d\x12\x12\x5b\x29\x11\x81\x15\x39\x69\x61\xd6\x32\xbe\x34\x0e\x80\x45\x9f\x4a\x63\x61\xc1\xc8\x6e\x25\x21\x55\xc6\x92\xa4\x2a\x35\x47\x03\x6f\xe6\xf3\xe9\x2f\x30\x99\xbd\xff\x05\xb8\xd2\x68\xa0\xdd\x6e\xbf\xad\x3f\xca\xd5\x12\x84\x84\x4c\x25\x2e\x1d\x43\x68\x91\x7d\x64\xab\x29\x73\x8c\x60\xb1\xa5\x6b\x55\x31\x68\x91\x17\x37\xff\x7c\xb3\x62\x59\x89\x77\xc8\x22\xf8\x07\x04\x6f\x41\x18\xc8\xd0\xb8\x29\x4a\x82\xdb\x83\x05\x66\x6a\xfd\x0b\x79\x4f\x02\x4f\x99\x4c\x70\x77\x8f\xa9\xbb\xa3\x55\xb0\xf1\xe0\xe5\x62\x08\xad\x41\xb7\x9b\x1b\x97\xa6\xb7\x25\x96\xf8\x3b\x0a\x38\xcf\x30\xb3\x95\x3c\xd5\x4a\xaa\xd2\xd0\xa0\xc6\xd1\x18\x21\x13\xef\x33\x09\x54\x04\xa9\x5e\x2b\x4c\x45\x87\xd2\x7d\x15\xa8\x18\xa8\x38\xa1\x36\x9d\xfa\x6a\xba\x1e\xfb\xd6\x22\xcb\x88\x2b\x2c\xcb\x14\x67\xb6\x62\x8b\xb1\x4c\xdb\xb2\xf0\x80\xe4\x1f\x2b\x41\x2a\xf6\x5d\x87\x7f\xa6\x11\x0d\x94\x05\x79\x14\xf8\x96\x67\x68\x2a\x02\x54\x2a\xc8\x21\x6b\x26\xdc\x33\x47\x1d\x4b\xca\x2e\xa8\xb7\x1f\x99\x70\x1c\xb8\x9e\x57\x85\xf2\x00\xc6\x39\xe5\x9f\xeb\x36\xe4\x7b\x06\x96\x99\x25\xa1\xac\x58\x26\x22\x88\xb5\xca\xdd\x5d\xb8\x46\xe7\x08\x0f\xaa\x9d\x33\x17\x2f\x3f\x48\x5b\x9e\xab\x39\x28\xed\x24\x75\x73\xb4\xcb\x10\xc1\x5f\xfa\xcf\x3d\xf0\xb8\x03\xe4\x26\xca\x93\xf7\x77\x57\x21\xac\x4d\xd8\x79\x7e\xb0\x08\x8f\x8f\xfb\x43\x67\xd5\x0d\x25\x92\xd5\x4c\x1a\xe6\xb8\x0c\x85\x52\x19\xe4\x6c\x03\x1a\xad\x16\xd5\x74\x6c\x50\x46\x64\xf0\xde\x31\xb5\x72\x99\x92\xb3\xcd\x5d\x75\x2e\x84\xa0\x76\xdc\x97\x21\x05\xd5\x9c\x15\xcb\x1c\xee\xb6\xf2\x24\x23\xd3\x79\xa9\xb5\x7b\xbd\xd8\x93\x48\x99\x81\x05\xa2\x84\x08\x2d\x72\x8b\x91\x07\x3b\x00\xd2\x47\x2c\x0a\xea\xb4\x6a\x9e\xbe\x32\x11\x63\x4d\x4c\xab\x28\xb7\x2b\x1d\x5c\xe5\xb9\xb0\x2e\x4c\x4c\x02\x93\x3c\x25\x7a\xd5\x4f\x62\xce\xdf\x28\x2d\x77\x0e\x3d\x04\x1f\xb6\xc8\xe8\x5e\xd5\xb9\x2b\x11\xa3\x29\x98\x0c\xa1\x35\x3a\x1a\x76\x53\xc7\xd9\x5d\xaf\xfc\x8a\xff\x9b\x4e\x59\x97\x31\xcc\x90\x9a\xe0\x3a\x15\x3c\xdd\x75\x51\xa8\xab\x71\x63\x69\x3d\x82\x28\xe2\x73\xfd\x59\x12\x51\xc2\x3a\xfb\x4a\x63\x55\x5e\x2b\x69\x1a\x47\xfd\x3e\x57\x37\x81\x1b\x57\x95\x5b\xd4\xaf\x5b\xbb\x57\xb8\x2a\x4c\x15\xf0\x4e\x2f\xcf\x04\xf9\xda\x95\xcf\x37\x6b\xca\xd7\xcf\xa5\xd0\x08\x6b\x03\x4a\x83\x28\x78\xfd\x34\xc7\x16\x99\x73\x23\x67\x96\xcc\x76\xdc\x7e\xbb\xcf\xa7\xd4\xda\x22\xec\x74\x28\x9b\x32\xaa\x43\xe1\xf1\xa0\x3f\xa8\xca\x1c\xdb\xb8\x32\x47\xa9\xb6\xc6\x08\x12\x46\x77\x12\xdc\xe1\x15\x75\xe5\x7b\x49\x26\x21\x61\x8d\xc2\x49\x07\x5d\x38\x5f\xa3\x00\xa9\xd6\x15\xbd\xce\x99\x99\x91\xb4\xe3\x57\xf3\xe7\x8e\x9e\x33\x03\x99\xc8\x45\x3d\x62\x44\x22\x8e\xd1\x31\x69\x17\xa1\x5d\x4d\xa3\xbc\x4c\x98\xb9\x72\xa7\x9b\x57\xc5\x09\x25\x1a\xba\x84\xaf\x31\x69\x75\x1c\x45\x97\xb8\x0d\xa1\xb7\xbf\x78\x87\x2b\xb5\x44\xb7\x3e\x1a\x34\xcb\x15\x47\x26\x8e\x5f\xaf\xd7\x67\x1a\x9b\x2d\xff\x19\x4a\xc6\xf6\x5a\x48\x1b\xc2\xf1\x8b\xb5\x7b\x72\x46\x8c\xfa\x4c\xab\x3c\x04\x7f\xb0\xdb\x63\xc6\xa0\x9d\x57\x6d\x7c\xb8\x5b\x2d\x4a\x93\xde\xab\x7f\x69\xc6\x33\x6c\xa0\xe0\x60\x57\xe4\x34\xe6\x6a\x45\x25\xce\x80\x51\x4a\xd2\xff\x85\x16\x51\x82\x54\x6d\x28\x8d\x12\xcd\xaa\x9c\x7a\x6e\x6d\x56\xb9\x6a\x56\x05\x47\x3e\x13\x66\x3f\x4c\x35\x35\xa2\xa8\x7a\xc1\x65\xb0\xc8\x14\x5f\xba\xa9\xa1\x62\x08\x58\x2d\x92\x04\xb5\xc3\xa6\xe1\x0e\x37\xb6\x29\x84\x55\x33\x1c\x76\x9b\x6e\xf8\x25\xc5\x9a\xba\x8d\x92\xd9\x5e\x37\x32\xbb\x5c\x6d\x4c\x7a\x86\xa6\xe6\xf4\x12\xde\x1f\xd4\xe8\x7f\xff\xb2\x76\x9f\x0a\x03\x06\xab\xca\x65\x68\xaa\x32\x14\xc8\xbc\xcc\xac\x28\x32\x41\xdd\x8e\x06\xad\x17\xd9\xfd\x9c\x6a\x68\xac\xc8\x9b\x36\x92\x30\x73\xbd\x13\x0b\xc1\x6f\x77\xa9\x8e\x31\xb9\x85\x08\x17\x65\x92\xd4\xd3\x0c\x95\x17\x47\xa1\x44\x01\x01\x7a\x6e\xb7\x2a\x63\x28\x5d\x45\x70\x2b\x34\x46\x90\x8c\x07\xf4\x2b\x84\x98\x65\x06\xdd\xa9\xa2\xd0\x2a\xae\x92\xb1\x01\xa6\x69\x8a\x56\x9b\x63\x5e\x95\x1d\xf5\xe3\x7e\xa1\x91\xd7\x49\x62\x75\x89\xde\x7f\x02\x00\x00\xff\xff\xc3\xf1\x27\xdf\xc9\x18\x00\x00")

func go_centrifuge_build_configs_default_config_yaml() ([]byte, error) {
	return bindata_read(
		_go_centrifuge_build_configs_default_config_yaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

var _go_centrifuge_build_configs_testing_config_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x3f\x4f\xc3\x30\x10\x47\x77\x7f\x8a\x93\xd8\x1b\x51\x89\xc5\x1b\x73\x05\x0b\x48\x1d\x91\xe3\xfc\x48\x4f\xa9\xff\x60\xdf\x51\xe5\xdb\x23\x87\xb4\x74\x40\x54\x8c\x3e\xbf\xe7\x77\x92\x3d\xa2\x14\x7e\xd7\x11\xcf\x90\x53\x2a\x93\x25\x41\x15\x8e\xa3\x71\x2a\x07\x44\x61\xef\x84\x53\xb4\x86\x08\xd1\xf5\x47\x0c\x96\xa4\x28\xcc\x1d\x3d\x7a\x9f\x34\x4a\xa5\x09\x33\x55\x49\xc5\x8d\x30\x6e\x1d\x36\x61\xc2\xdc\xc6\xb0\xd4\x49\xc8\xdd\xf9\xca\x98\x0f\x85\xa2\x11\x51\xc3\x3e\x95\x09\xa5\x5a\x7a\x30\x44\xa7\xe5\xb0\x77\x2c\xaf\x1c\xf0\xf4\x62\xe9\xde\x98\xf6\xcc\x02\xa7\x01\x6e\x08\xbc\x2c\x43\x94\x0b\x7f\x3a\xc1\x84\xd9\x52\xaf\x7c\x1c\xba\x82\x9a\xb4\x78\xd4\xae\xa1\x6f\x0b\xbb\x99\x30\x6f\x32\xc2\xb7\xa2\xfd\x91\xfd\x2d\x23\x6b\xbf\x1a\x79\x9b\xed\x95\xb8\xfb\x4d\xcc\xdb\xbc\x6b\x89\x8b\x74\xd9\xec\x2f\xfc\x67\xab\xca\x63\xe4\x38\xde\xec\xac\xdc\x7f\x5a\x57\xca\xb9\x67\x5c\xf4\x87\x54\xd6\x60\x2e\xf0\x29\x04\x96\xf5\x4f\xbf\x02\x00\x00\xff\xff\x76\x25\x0d\x0f\x0f\x02\x00\x00")

func go_centrifuge_build_configs_testing_config_yaml() ([]byte, error) {
	return bindata_read(
		_go_centrifuge_build_configs_testing_config_yaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"go-centrifuge/build/configs/default_config.yaml": go_centrifuge_build_configs_default_config_yaml,
	"go-centrifuge/build/configs/testing_config.yaml": go_centrifuge_build_configs_testing_config_yaml,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"go-centrifuge": &_bintree_t{nil, map[string]*_bintree_t{
		"build": &_bintree_t{nil, map[string]*_bintree_t{
			"configs": &_bintree_t{nil, map[string]*_bintree_t{
				"default_config.yaml": &_bintree_t{go_centrifuge_build_configs_default_config_yaml, map[string]*_bintree_t{
				}},
				"testing_config.yaml": &_bintree_t{go_centrifuge_build_configs_testing_config_yaml, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
