// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package uniques

import (
	context "context"

	centchain "github.com/centrifuge/go-centrifuge/centchain"

	mock "github.com/stretchr/testify/mock"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
)

// UniquesAPIMock is an autogenerated mock type for the API type
type UniquesAPIMock struct {
	mock.Mock
}

// CreateCollection provides a mock function with given fields: ctx, collectionID
func (_m *UniquesAPIMock) CreateCollection(ctx context.Context, collectionID types.U64) (*centchain.ExtrinsicInfo, error) {
	ret := _m.Called(ctx, collectionID)

	var r0 *centchain.ExtrinsicInfo
	if rf, ok := ret.Get(0).(func(context.Context, types.U64) *centchain.ExtrinsicInfo); ok {
		r0 = rf(ctx, collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*centchain.ExtrinsicInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.U64) error); ok {
		r1 = rf(ctx, collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionDetails provides a mock function with given fields: ctx, collectionID
func (_m *UniquesAPIMock) GetCollectionDetails(ctx context.Context, collectionID types.U64) (*types.CollectionDetails, error) {
	ret := _m.Called(ctx, collectionID)

	var r0 *types.CollectionDetails
	if rf, ok := ret.Get(0).(func(context.Context, types.U64) *types.CollectionDetails); ok {
		r0 = rf(ctx, collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CollectionDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.U64) error); ok {
		r1 = rf(ctx, collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemAttribute provides a mock function with given fields: ctx, collectionID, itemID, key
func (_m *UniquesAPIMock) GetItemAttribute(ctx context.Context, collectionID types.U64, itemID types.U128, key []byte) ([]byte, error) {
	ret := _m.Called(ctx, collectionID, itemID, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, types.U64, types.U128, []byte) []byte); ok {
		r0 = rf(ctx, collectionID, itemID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.U64, types.U128, []byte) error); ok {
		r1 = rf(ctx, collectionID, itemID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemDetails provides a mock function with given fields: ctx, collectionID, itemID
func (_m *UniquesAPIMock) GetItemDetails(ctx context.Context, collectionID types.U64, itemID types.U128) (*types.ItemDetails, error) {
	ret := _m.Called(ctx, collectionID, itemID)

	var r0 *types.ItemDetails
	if rf, ok := ret.Get(0).(func(context.Context, types.U64, types.U128) *types.ItemDetails); ok {
		r0 = rf(ctx, collectionID, itemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ItemDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.U64, types.U128) error); ok {
		r1 = rf(ctx, collectionID, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemMetadata provides a mock function with given fields: ctx, collectionID, itemID
func (_m *UniquesAPIMock) GetItemMetadata(ctx context.Context, collectionID types.U64, itemID types.U128) (*types.ItemMetadata, error) {
	ret := _m.Called(ctx, collectionID, itemID)

	var r0 *types.ItemMetadata
	if rf, ok := ret.Get(0).(func(context.Context, types.U64, types.U128) *types.ItemMetadata); ok {
		r0 = rf(ctx, collectionID, itemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ItemMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.U64, types.U128) error); ok {
		r1 = rf(ctx, collectionID, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mint provides a mock function with given fields: ctx, collectionID, itemID, owner
func (_m *UniquesAPIMock) Mint(ctx context.Context, collectionID types.U64, itemID types.U128, owner *types.AccountID) (*centchain.ExtrinsicInfo, error) {
	ret := _m.Called(ctx, collectionID, itemID, owner)

	var r0 *centchain.ExtrinsicInfo
	if rf, ok := ret.Get(0).(func(context.Context, types.U64, types.U128, *types.AccountID) *centchain.ExtrinsicInfo); ok {
		r0 = rf(ctx, collectionID, itemID, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*centchain.ExtrinsicInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.U64, types.U128, *types.AccountID) error); ok {
		r1 = rf(ctx, collectionID, itemID, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAttribute provides a mock function with given fields: ctx, collectionID, itemID, key, value
func (_m *UniquesAPIMock) SetAttribute(ctx context.Context, collectionID types.U64, itemID types.U128, key []byte, value []byte) (*centchain.ExtrinsicInfo, error) {
	ret := _m.Called(ctx, collectionID, itemID, key, value)

	var r0 *centchain.ExtrinsicInfo
	if rf, ok := ret.Get(0).(func(context.Context, types.U64, types.U128, []byte, []byte) *centchain.ExtrinsicInfo); ok {
		r0 = rf(ctx, collectionID, itemID, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*centchain.ExtrinsicInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.U64, types.U128, []byte, []byte) error); ok {
		r1 = rf(ctx, collectionID, itemID, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMetadata provides a mock function with given fields: ctx, collectionID, itemID, data, isFrozen
func (_m *UniquesAPIMock) SetMetadata(ctx context.Context, collectionID types.U64, itemID types.U128, data []byte, isFrozen bool) (*centchain.ExtrinsicInfo, error) {
	ret := _m.Called(ctx, collectionID, itemID, data, isFrozen)

	var r0 *centchain.ExtrinsicInfo
	if rf, ok := ret.Get(0).(func(context.Context, types.U64, types.U128, []byte, bool) *centchain.ExtrinsicInfo); ok {
		r0 = rf(ctx, collectionID, itemID, data, isFrozen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*centchain.ExtrinsicInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.U64, types.U128, []byte, bool) error); ok {
		r1 = rf(ctx, collectionID, itemID, data, isFrozen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewUniquesAPIMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUniquesAPIMock creates a new instance of UniquesAPIMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUniquesAPIMock(t NewUniquesAPIMockT) *UniquesAPIMock {
	mock := &UniquesAPIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
