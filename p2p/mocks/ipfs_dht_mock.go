// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p-core/peer"
)

// IpfsDHTMock is an autogenerated mock type for the IpfsDHT type
type IpfsDHTMock struct {
	mock.Mock
}

// Bootstrap provides a mock function with given fields: ctx
func (_m *IpfsDHTMock) Bootstrap(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindPeer provides a mock function with given fields: ctx, id
func (_m *IpfsDHTMock) FindPeer(ctx context.Context, id peer.ID) (peer.AddrInfo, error) {
	ret := _m.Called(ctx, id)

	var r0 peer.AddrInfo
	if rf, ok := ret.Get(0).(func(context.Context, peer.ID) peer.AddrInfo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(peer.AddrInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, peer.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewIpfsDHTMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewIpfsDHTMock creates a new instance of IpfsDHTMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIpfsDHTMock(t NewIpfsDHTMockT) *IpfsDHTMock {
	mock := &IpfsDHTMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
