// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package ipfs_pinning

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PinningServiceClientMock is an autogenerated mock type for the PinningServiceClient type
type PinningServiceClientMock struct {
	mock.Mock
}

// PinData provides a mock function with given fields: ctx, req
func (_m *PinningServiceClientMock) PinData(ctx context.Context, req *PinRequest) (*PinResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *PinResponse
	if rf, ok := ret.Get(0).(func(context.Context, *PinRequest) *PinResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PinResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PinRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpinData provides a mock function with given fields: ctx, CID
func (_m *PinningServiceClientMock) UnpinData(ctx context.Context, CID string) error {
	ret := _m.Called(ctx, CID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, CID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewPinningServiceClientMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPinningServiceClientMock creates a new instance of PinningServiceClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPinningServiceClientMock(t NewPinningServiceClientMockT) *PinningServiceClientMock {
	mock := &PinningServiceClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
