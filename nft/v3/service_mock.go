// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package v3

import (
	context "context"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	mock "github.com/stretchr/testify/mock"
)

// ServiceMock is an autogenerated mock type for the Service type
type ServiceMock struct {
	mock.Mock
}

// CreateNFTCollection provides a mock function with given fields: ctx, req
func (_m *ServiceMock) CreateNFTCollection(ctx context.Context, req *CreateNFTCollectionRequest) (*CreateNFTCollectionResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *CreateNFTCollectionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateNFTCollectionRequest) *CreateNFTCollectionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateNFTCollectionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateNFTCollectionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemAttribute provides a mock function with given fields: ctx, req
func (_m *ServiceMock) GetItemAttribute(ctx context.Context, req *GetItemAttributeRequest) ([]byte, error) {
	ret := _m.Called(ctx, req)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, *GetItemAttributeRequest) []byte); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetItemAttributeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemMetadata provides a mock function with given fields: ctx, req
func (_m *ServiceMock) GetItemMetadata(ctx context.Context, req *GetItemMetadataRequest) (*types.ItemMetadata, error) {
	ret := _m.Called(ctx, req)

	var r0 *types.ItemMetadata
	if rf, ok := ret.Get(0).(func(context.Context, *GetItemMetadataRequest) *types.ItemMetadata); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ItemMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetItemMetadataRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOwner provides a mock function with given fields: ctx, req
func (_m *ServiceMock) GetNFTOwner(ctx context.Context, req *GetNFTOwnerRequest) (*GetNFTOwnerResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *GetNFTOwnerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetNFTOwnerRequest) *GetNFTOwnerResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetNFTOwnerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetNFTOwnerRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MintNFT provides a mock function with given fields: ctx, req, documentPending
func (_m *ServiceMock) MintNFT(ctx context.Context, req *MintNFTRequest, documentPending bool) (*MintNFTResponse, error) {
	ret := _m.Called(ctx, req, documentPending)

	var r0 *MintNFTResponse
	if rf, ok := ret.Get(0).(func(context.Context, *MintNFTRequest, bool) *MintNFTResponse); ok {
		r0 = rf(ctx, req, documentPending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MintNFTResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *MintNFTRequest, bool) error); ok {
		r1 = rf(ctx, req, documentPending)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewServiceMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceMock creates a new instance of ServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceMock(t NewServiceMockT) *ServiceMock {
	mock := &ServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
