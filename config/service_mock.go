// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package config

import (
	coredocumentpb "github.com/centrifuge/centrifuge-protobufs/gen/go/coredocument"
	mock "github.com/stretchr/testify/mock"
)

// ServiceMock is an autogenerated mock type for the Service type
type ServiceMock struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: a
func (_m *ServiceMock) CreateAccount(a Account) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(Account) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateConfig provides a mock function with given fields: config
func (_m *ServiceMock) CreateConfig(config Configuration) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(Configuration) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNodeAdmin provides a mock function with given fields: nodeAdmin
func (_m *ServiceMock) CreateNodeAdmin(nodeAdmin NodeAdmin) error {
	ret := _m.Called(nodeAdmin)

	var r0 error
	if rf, ok := ret.Get(0).(func(NodeAdmin) error); ok {
		r0 = rf(nodeAdmin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccount provides a mock function with given fields: identifier
func (_m *ServiceMock) DeleteAccount(identifier []byte) error {
	ret := _m.Called(identifier)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(identifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with given fields: identifier
func (_m *ServiceMock) GetAccount(identifier []byte) (Account, error) {
	ret := _m.Called(identifier)

	var r0 Account
	if rf, ok := ret.Get(0).(func([]byte) Account); ok {
		r0 = rf(identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccounts provides a mock function with given fields:
func (_m *ServiceMock) GetAccounts() ([]Account, error) {
	ret := _m.Called()

	var r0 []Account
	if rf, ok := ret.Get(0).(func() []Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields:
func (_m *ServiceMock) GetConfig() (Configuration, error) {
	ret := _m.Called()

	var r0 Configuration
	if rf, ok := ret.Get(0).(func() Configuration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Configuration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeAdmin provides a mock function with given fields:
func (_m *ServiceMock) GetNodeAdmin() (NodeAdmin, error) {
	ret := _m.Called()

	var r0 NodeAdmin
	if rf, ok := ret.Get(0).(func() NodeAdmin); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(NodeAdmin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sign provides a mock function with given fields: account, payload
func (_m *ServiceMock) Sign(account []byte, payload []byte) (*coredocumentpb.Signature, error) {
	ret := _m.Called(account, payload)

	var r0 *coredocumentpb.Signature
	if rf, ok := ret.Get(0).(func([]byte, []byte) *coredocumentpb.Signature); ok {
		r0 = rf(account, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coredocumentpb.Signature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(account, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: account
func (_m *ServiceMock) UpdateAccount(account Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNodeAdmin provides a mock function with given fields: nodeAdmin
func (_m *ServiceMock) UpdateNodeAdmin(nodeAdmin NodeAdmin) error {
	ret := _m.Called(nodeAdmin)

	var r0 error
	if rf, ok := ret.Get(0).(func(NodeAdmin) error); ok {
		r0 = rf(nodeAdmin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewServiceMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceMock creates a new instance of ServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceMock(t NewServiceMockT) *ServiceMock {
	mock := &ServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
