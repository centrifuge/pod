// Code generated by mockery v2.12.0. DO NOT EDIT.

package config

import (
	coredocumentpb "github.com/centrifuge/centrifuge-protobufs/gen/go/coredocument"
	mock "github.com/stretchr/testify/mock"

	reflect "reflect"

	testing "testing"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
)

// AccountMock is an autogenerated mock type for the Account type
type AccountMock struct {
	mock.Mock
}

// FromJSON provides a mock function with given fields: json
func (_m *AccountMock) FromJSON(json []byte) error {
	ret := _m.Called(json)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(json)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountProxies provides a mock function with given fields:
func (_m *AccountMock) GetAccountProxies() AccountProxies {
	ret := _m.Called()

	var r0 AccountProxies
	if rf, ok := ret.Get(0).(func() AccountProxies); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(AccountProxies)
		}
	}

	return r0
}

// GetIdentity provides a mock function with given fields:
func (_m *AccountMock) GetIdentity() *types.AccountID {
	ret := _m.Called()

	var r0 *types.AccountID
	if rf, ok := ret.Get(0).(func() *types.AccountID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccountID)
		}
	}

	return r0
}

// GetP2PPublicKey provides a mock function with given fields:
func (_m *AccountMock) GetP2PPublicKey() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetPrecommitEnabled provides a mock function with given fields:
func (_m *AccountMock) GetPrecommitEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetSigningPublicKey provides a mock function with given fields:
func (_m *AccountMock) GetSigningPublicKey() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetWebhookURL provides a mock function with given fields:
func (_m *AccountMock) GetWebhookURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// JSON provides a mock function with given fields:
func (_m *AccountMock) JSON() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignMsg provides a mock function with given fields: msg
func (_m *AccountMock) SignMsg(msg []byte) (*coredocumentpb.Signature, error) {
	ret := _m.Called(msg)

	var r0 *coredocumentpb.Signature
	if rf, ok := ret.Get(0).(func([]byte) *coredocumentpb.Signature); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coredocumentpb.Signature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Type provides a mock function with given fields:
func (_m *AccountMock) Type() reflect.Type {
	ret := _m.Called()

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func() reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

// NewAccountMock creates a new instance of AccountMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountMock(t testing.TB) *AccountMock {
	mock := &AccountMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
