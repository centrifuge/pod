// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package configstore

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
)

// NodeAdminMock is an autogenerated mock type for the NodeAdmin type
type NodeAdminMock struct {
	mock.Mock
}

// FromJSON provides a mock function with given fields: json
func (_m *NodeAdminMock) FromJSON(json []byte) error {
	ret := _m.Called(json)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(json)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountID provides a mock function with given fields:
func (_m *NodeAdminMock) GetAccountID() *types.AccountID {
	ret := _m.Called()

	var r0 *types.AccountID
	if rf, ok := ret.Get(0).(func() *types.AccountID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccountID)
		}
	}

	return r0
}

// JSON provides a mock function with given fields:
func (_m *NodeAdminMock) JSON() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Type provides a mock function with given fields:
func (_m *NodeAdminMock) Type() reflect.Type {
	ret := _m.Called()

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func() reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

type NewNodeAdminMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeAdminMock creates a new instance of NodeAdminMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeAdminMock(t NewNodeAdminMockT) *NodeAdminMock {
	mock := &NodeAdminMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
