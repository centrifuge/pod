// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package documents

import mock "github.com/stretchr/testify/mock"

// RepositoryMock is an autogenerated mock type for the Repository type
type RepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: accountID, id, model
func (_m *RepositoryMock) Create(accountID []byte, id []byte, model Document) error {
	ret := _m.Called(accountID, id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, Document) error); ok {
		r0 = rf(accountID, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: accountID, id
func (_m *RepositoryMock) Exists(accountID []byte, id []byte) bool {
	ret := _m.Called(accountID, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(accountID, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: accountID, id
func (_m *RepositoryMock) Get(accountID []byte, id []byte) (Document, error) {
	ret := _m.Called(accountID, id)

	var r0 Document
	if rf, ok := ret.Get(0).(func([]byte, []byte) Document); ok {
		r0 = rf(accountID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Document)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(accountID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatest provides a mock function with given fields: accountID, docID
func (_m *RepositoryMock) GetLatest(accountID []byte, docID []byte) (Document, error) {
	ret := _m.Called(accountID, docID)

	var r0 Document
	if rf, ok := ret.Get(0).(func([]byte, []byte) Document); ok {
		r0 = rf(accountID, docID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Document)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(accountID, docID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: model
func (_m *RepositoryMock) Register(model Document) {
	_m.Called(model)
}

// Update provides a mock function with given fields: accountID, id, model
func (_m *RepositoryMock) Update(accountID []byte, id []byte, model Document) error {
	ret := _m.Called(accountID, id, model)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte, Document) error); ok {
		r0 = rf(accountID, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewRepositoryMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryMock creates a new instance of RepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryMock(t NewRepositoryMockT) *RepositoryMock {
	mock := &RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
