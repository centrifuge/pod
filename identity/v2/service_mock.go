// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package v2

import (
	context "context"

	config "github.com/centrifuge/go-centrifuge/config"

	keystore "github.com/centrifuge/chain-custom-types/pkg/keystore"

	mock "github.com/stretchr/testify/mock"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
)

// ServiceMock is an autogenerated mock type for the Service type
type ServiceMock struct {
	mock.Mock
}

// CreateIdentity provides a mock function with given fields: ctx, req
func (_m *ServiceMock) CreateIdentity(ctx context.Context, req *CreateIdentityRequest) (config.Account, error) {
	ret := _m.Called(ctx, req)

	var r0 config.Account
	if rf, ok := ret.Get(0).(func(context.Context, *CreateIdentityRequest) config.Account); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateIdentityRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastKeyByPurpose provides a mock function with given fields: ctx, accountID, keyPurpose
func (_m *ServiceMock) GetLastKeyByPurpose(ctx context.Context, accountID *types.AccountID, keyPurpose keystore.KeyPurpose) (*types.Hash, error) {
	ret := _m.Called(ctx, accountID, keyPurpose)

	var r0 *types.Hash
	if rf, ok := ret.Get(0).(func(context.Context, *types.AccountID, keystore.KeyPurpose) *types.Hash); ok {
		r0 = rf(ctx, accountID, keyPurpose)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.AccountID, keystore.KeyPurpose) error); ok {
		r1 = rf(ctx, accountID, keyPurpose)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAccount provides a mock function with given fields: ctx, accountID
func (_m *ServiceMock) ValidateAccount(ctx context.Context, accountID *types.AccountID) error {
	ret := _m.Called(ctx, accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AccountID) error); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateKey provides a mock function with given fields: ctx, accountID, pubKey, keyPurpose
func (_m *ServiceMock) ValidateKey(ctx context.Context, accountID *types.AccountID, pubKey []byte, keyPurpose keystore.KeyPurpose) error {
	ret := _m.Called(ctx, accountID, pubKey, keyPurpose)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AccountID, []byte, keystore.KeyPurpose) error); ok {
		r0 = rf(ctx, accountID, pubKey, keyPurpose)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateSignature provides a mock function with given fields: ctx, accountID, pubKey, signature, message
func (_m *ServiceMock) ValidateSignature(ctx context.Context, accountID *types.AccountID, pubKey []byte, signature []byte, message []byte) error {
	ret := _m.Called(ctx, accountID, pubKey, signature, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AccountID, []byte, []byte, []byte) error); ok {
		r0 = rf(ctx, accountID, pubKey, signature, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewServiceMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceMock creates a new instance of ServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceMock(t NewServiceMockT) *ServiceMock {
	mock := &ServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
