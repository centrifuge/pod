// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	centchain "github.com/centrifuge/go-centrifuge/centchain"

	mock "github.com/stretchr/testify/mock"

	signature "github.com/centrifuge/go-substrate-rpc-client/v4/signature"

	testing "testing"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
)

// APIMock is an autogenerated mock type for the API type
type APIMock struct {
	mock.Mock
}

// Call provides a mock function with given fields: result, method, args
func (_m *APIMock) Call(result interface{}, method string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, result, method)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(result, method, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBlockLatest provides a mock function with given fields:
func (_m *APIMock) GetBlockLatest() (*types.SignedBlock, error) {
	ret := _m.Called()

	var r0 *types.SignedBlock
	if rf, ok := ret.Get(0).(func() *types.SignedBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SignedBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadataLatest provides a mock function with given fields:
func (_m *APIMock) GetMetadataLatest() (*types.Metadata, error) {
	ret := _m.Called()

	var r0 *types.Metadata
	if rf, ok := ret.Get(0).(func() *types.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageLatest provides a mock function with given fields: key, target
func (_m *APIMock) GetStorageLatest(key types.StorageKey, target interface{}) error {
	ret := _m.Called(key, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.StorageKey, interface{}) error); ok {
		r0 = rf(key, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitAndWatch provides a mock function with given fields: ctx, meta, c, krp
func (_m *APIMock) SubmitAndWatch(ctx context.Context, meta *types.Metadata, c types.Call, krp signature.KeyringPair) (centchain.ExtrinsicInfo, error) {
	ret := _m.Called(ctx, meta, c, krp)

	var r0 centchain.ExtrinsicInfo
	if rf, ok := ret.Get(0).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) centchain.ExtrinsicInfo); ok {
		r0 = rf(ctx, meta, c, krp)
	} else {
		r0 = ret.Get(0).(centchain.ExtrinsicInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) error); ok {
		r1 = rf(ctx, meta, c, krp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitExtrinsic provides a mock function with given fields: ctx, meta, c, krp
func (_m *APIMock) SubmitExtrinsic(ctx context.Context, meta *types.Metadata, c types.Call, krp signature.KeyringPair) (types.Hash, types.BlockNumber, types.MultiSignature, error) {
	ret := _m.Called(ctx, meta, c, krp)

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) types.Hash); ok {
		r0 = rf(ctx, meta, c, krp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 types.BlockNumber
	if rf, ok := ret.Get(1).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) types.BlockNumber); ok {
		r1 = rf(ctx, meta, c, krp)
	} else {
		r1 = ret.Get(1).(types.BlockNumber)
	}

	var r2 types.MultiSignature
	if rf, ok := ret.Get(2).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) types.MultiSignature); ok {
		r2 = rf(ctx, meta, c, krp)
	} else {
		r2 = ret.Get(2).(types.MultiSignature)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) error); ok {
		r3 = rf(ctx, meta, c, krp)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewAPIMock creates a new instance of APIMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPIMock(t testing.TB) *APIMock {
	mock := &APIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
