// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package centchain

import (
	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	mock "github.com/stretchr/testify/mock"
)

// SubstrateAPIMock is an autogenerated mock type for the substrateAPI type
type SubstrateAPIMock struct {
	mock.Mock
}

// Call provides a mock function with given fields: result, method, args
func (_m *SubstrateAPIMock) Call(result interface{}, method string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, result, method)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(result, method, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBlock provides a mock function with given fields: blockHash
func (_m *SubstrateAPIMock) GetBlock(blockHash types.Hash) (*types.SignedBlock, error) {
	ret := _m.Called(blockHash)

	var r0 *types.SignedBlock
	if rf, ok := ret.Get(0).(func(types.Hash) *types.SignedBlock); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SignedBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Hash) error); ok {
		r1 = rf(blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHash provides a mock function with given fields: blockNumber
func (_m *SubstrateAPIMock) GetBlockHash(blockNumber uint64) (types.Hash, error) {
	ret := _m.Called(blockNumber)

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func(uint64) types.Hash); ok {
		r0 = rf(blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockLatest provides a mock function with given fields:
func (_m *SubstrateAPIMock) GetBlockLatest() (*types.SignedBlock, error) {
	ret := _m.Called()

	var r0 *types.SignedBlock
	if rf, ok := ret.Get(0).(func() *types.SignedBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SignedBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadataLatest provides a mock function with given fields:
func (_m *SubstrateAPIMock) GetMetadataLatest() (*types.Metadata, error) {
	ret := _m.Called()

	var r0 *types.Metadata
	if rf, ok := ret.Get(0).(func() *types.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingExtrinsics provides a mock function with given fields:
func (_m *SubstrateAPIMock) GetPendingExtrinsics() ([]types.Extrinsic, error) {
	ret := _m.Called()

	var r0 []types.Extrinsic
	if rf, ok := ret.Get(0).(func() []types.Extrinsic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Extrinsic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuntimeVersionLatest provides a mock function with given fields:
func (_m *SubstrateAPIMock) GetRuntimeVersionLatest() (*types.RuntimeVersion, error) {
	ret := _m.Called()

	var r0 *types.RuntimeVersion
	if rf, ok := ret.Get(0).(func() *types.RuntimeVersion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RuntimeVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorage provides a mock function with given fields: key, target, blockHash
func (_m *SubstrateAPIMock) GetStorage(key types.StorageKey, target interface{}, blockHash types.Hash) error {
	ret := _m.Called(key, target, blockHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.StorageKey, interface{}, types.Hash) error); ok {
		r0 = rf(key, target, blockHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStorageLatest provides a mock function with given fields: key, target
func (_m *SubstrateAPIMock) GetStorageLatest(key types.StorageKey, target interface{}) (bool, error) {
	ret := _m.Called(key, target)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.StorageKey, interface{}) bool); ok {
		r0 = rf(key, target)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, interface{}) error); ok {
		r1 = rf(key, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitExtrinsic provides a mock function with given fields: ext
func (_m *SubstrateAPIMock) SubmitExtrinsic(ext types.Extrinsic) (types.Hash, error) {
	ret := _m.Called(ext)

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func(types.Extrinsic) types.Hash); ok {
		r0 = rf(ext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Extrinsic) error); ok {
		r1 = rf(ext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewSubstrateAPIMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubstrateAPIMock creates a new instance of SubstrateAPIMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubstrateAPIMock(t NewSubstrateAPIMockT) *SubstrateAPIMock {
	mock := &SubstrateAPIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
