//go:build unit || integration
// +build unit integration

package centchain

import (
	"context"
	"strings"
	"testing"

	"github.com/centrifuge/go-substrate-rpc-client/v4/signature"

	"github.com/centrifuge/go-substrate-rpc-client/v4/client"
	"github.com/centrifuge/go-substrate-rpc-client/v4/types"
	"github.com/stretchr/testify/mock"
)

func (b Bootstrapper) TestBootstrap(context map[string]interface{}) error {
	return b.Bootstrap(context)
}

func (Bootstrapper) TestTearDown() error {
	return nil
}

// SubstrateApiMock is an autogenerated mock type for the substrateAPI type
type SubstrateApiMock struct {
	mock.Mock
}

// Call provides a mock function with given fields: result, method, args
func (_m *SubstrateApiMock) Call(result interface{}, method string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, result, method)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(result, method, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBlock provides a mock function with given fields: blockHash
func (_m *SubstrateApiMock) GetBlock(blockHash types.Hash) (*types.SignedBlock, error) {
	ret := _m.Called(blockHash)

	var r0 *types.SignedBlock
	if rf, ok := ret.Get(0).(func(types.Hash) *types.SignedBlock); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SignedBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Hash) error); ok {
		r1 = rf(blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHash provides a mock function with given fields: blockNumber
func (_m *SubstrateApiMock) GetBlockHash(blockNumber uint64) (types.Hash, error) {
	ret := _m.Called(blockNumber)

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func(uint64) types.Hash); ok {
		r0 = rf(blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockLatest provides a mock function with given fields:
func (_m *SubstrateApiMock) GetBlockLatest() (*types.SignedBlock, error) {
	ret := _m.Called()

	var r0 *types.SignedBlock
	if rf, ok := ret.Get(0).(func() *types.SignedBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SignedBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields:
func (_m *SubstrateApiMock) GetClient() client.Client {
	ret := _m.Called()

	var r0 client.Client
	if rf, ok := ret.Get(0).(func() client.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	return r0
}

// GetMetadataLatest provides a mock function with given fields:
func (_m *SubstrateApiMock) GetMetadataLatest() (*types.Metadata, error) {
	ret := _m.Called()

	var r0 *types.Metadata
	if rf, ok := ret.Get(0).(func() *types.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuntimeVersionLatest provides a mock function with given fields:
func (_m *SubstrateApiMock) GetRuntimeVersionLatest() (*types.RuntimeVersion, error) {
	ret := _m.Called()

	var r0 *types.RuntimeVersion
	if rf, ok := ret.Get(0).(func() *types.RuntimeVersion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RuntimeVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorage provides a mock function with given fields: key, target, blockHash
func (_m *SubstrateApiMock) GetStorage(key types.StorageKey, target interface{}, blockHash types.Hash) error {
	ret := _m.Called(key, target, blockHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.StorageKey, interface{}, types.Hash) error); ok {
		r0 = rf(key, target, blockHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStorageLatest provides a mock function with given fields: key, target
func (_m *SubstrateApiMock) GetStorageLatest(key types.StorageKey, target interface{}) (bool, error) {
	ret := _m.Called(key, target)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.StorageKey, interface{}) bool); ok {
		r0 = rf(key, target)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, interface{}) error); ok {
		r1 = rf(key, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubstrateApiMock creates a new instance of SubstrateApiMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubstrateApiMock(t testing.TB) *SubstrateApiMock {
	mock := &SubstrateApiMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ApiMock is an autogenerated mock type for the API type
type ApiMock struct {
	mock.Mock
}

// Call provides a mock function with given fields: result, method, args
func (_m *ApiMock) Call(result interface{}, method string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, result, method)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(result, method, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMetadataLatest provides a mock function with given fields:
func (_m *ApiMock) GetMetadataLatest() (*types.Metadata, error) {
	ret := _m.Called()

	var r0 *types.Metadata
	if rf, ok := ret.Get(0).(func() *types.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageLatest provides a mock function with given fields: key, target
func (_m *ApiMock) GetStorageLatest(key types.StorageKey, target interface{}) (bool, error) {
	ret := _m.Called(key, target)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.StorageKey, interface{}) bool); ok {
		r0 = rf(key, target)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.StorageKey, interface{}) error); ok {
		r1 = rf(key, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitAndWatch provides a mock function with given fields: ctx, meta, c, krp
func (_m *ApiMock) SubmitAndWatch(ctx context.Context, meta *types.Metadata, c types.Call, krp signature.KeyringPair) (ExtrinsicInfo, error) {
	ret := _m.Called(ctx, meta, c, krp)

	var r0 ExtrinsicInfo
	if rf, ok := ret.Get(0).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) ExtrinsicInfo); ok {
		r0 = rf(ctx, meta, c, krp)
	} else {
		r0 = ret.Get(0).(ExtrinsicInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) error); ok {
		r1 = rf(ctx, meta, c, krp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitExtrinsic provides a mock function with given fields: ctx, meta, c, krp
func (_m *ApiMock) SubmitExtrinsic(ctx context.Context, meta *types.Metadata, c types.Call, krp signature.KeyringPair) (types.Hash, types.BlockNumber, types.MultiSignature, error) {
	ret := _m.Called(ctx, meta, c, krp)

	var r0 types.Hash
	if rf, ok := ret.Get(0).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) types.Hash); ok {
		r0 = rf(ctx, meta, c, krp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	var r1 types.BlockNumber
	if rf, ok := ret.Get(1).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) types.BlockNumber); ok {
		r1 = rf(ctx, meta, c, krp)
	} else {
		r1 = ret.Get(1).(types.BlockNumber)
	}

	var r2 types.MultiSignature
	if rf, ok := ret.Get(2).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) types.MultiSignature); ok {
		r2 = rf(ctx, meta, c, krp)
	} else {
		r2 = ret.Get(2).(types.MultiSignature)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, *types.Metadata, types.Call, signature.KeyringPair) error); ok {
		r3 = rf(ctx, meta, c, krp)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewApiMock creates a new instance of ApiMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewApiMock(t testing.TB) *ApiMock {
	mock := &ApiMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

func MetaDataWithCall(call string) *types.Metadata {
	data := strings.Split(call, ".")
	meta := types.NewMetadataV8()
	meta.AsMetadataV8.Modules = []types.ModuleMetadataV8{
		{
			Name:       "System",
			HasStorage: true,
			Storage: types.StorageMetadata{
				Prefix: "System",
				Items: []types.StorageFunctionMetadataV5{
					{
						Name: "Account",
						Type: types.StorageFunctionTypeV5{
							IsMap: true,
							AsMap: types.MapTypeV4{
								Hasher: types.StorageHasher{IsBlake2_256: true},
							},
						},
					},
					{
						Name: "Events",
						Type: types.StorageFunctionTypeV5{
							IsMap: true,
							AsMap: types.MapTypeV4{
								Hasher: types.StorageHasher{IsBlake2_256: true},
							},
						},
					},
				},
			},
			HasEvents: true,
			Events: []types.EventMetadataV4{
				{
					Name: "ExtrinsicSuccess",
				},
				{
					Name: "ExtrinsicFailed",
				},
			},
		},
		{
			Name:       types.Text(data[0]),
			HasStorage: true,
			Storage: types.StorageMetadata{
				Prefix: types.Text(data[0]),
				Items: []types.StorageFunctionMetadataV5{
					{
						Name: "Events",
						Type: types.StorageFunctionTypeV5{
							IsMap: true,
							AsMap: types.MapTypeV4{
								Hasher: types.StorageHasher{IsBlake2_256: true},
							},
						},
					},
				},
			},
			HasCalls: true,
			Calls: []types.FunctionMetadataV4{{
				Name: types.Text(data[1]),
			}},
		},
	}
	return meta
}

type MockClient struct {
	mock.Mock
	client.Client
}

func (m *MockClient) Call(result interface{}, method string, args ...interface{}) error {
	arg := m.Called(result, method, args)
	res := arg.Get(0).(string)
	eres := result.(*string)
	*eres = res
	return arg.Error(1)
}
